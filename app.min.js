var knucklebones = knucklebones || {},
  Namespace = function() {
    "use strict";

    function t(t) {
      for (var e = t.split("."), i = "", s = window, o = 0, n = e.length; o < n; o++) i = e[o], s[i] = s[i] || {}, s = s[i];
      return s
    }
    return {
      use: t
    }
  }();
Namespace.use("knucklebones.views"), knucklebones.views.Chuck = Backbone.View.extend({
    selectors: {
      item: "[data-chuck=item]",
      play: '[data-chuck="play"]',
      timer: '[data-chuck="timer"]',
      progress: '[data-chuck="progress"]',
      bar: '[data-chuck="bar"]',
      selector: '[data-chuck="bar_selector"]',
      support: '[data-chuck="support"]',
      playerContainer: '[data-chuck="player"]',
      scrollItems: "[data-scrollMagic]"
    },
    states: {
      isPlaying: "is_playing",
      isPaused: "is_paused",
      isLoading: "is_loading",
      hasControls: "has_controls"
    },
    settings: {
      timeToHide: 1500
    },
    scene: [],
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$window = $(window), this.$iframe = this.$el.find("iframe"), this.$video = this.$el.find("video"), this.video = this.$video.get(0), this.$play = this.$el.find(this.selectors.play), this.$support = this.$el.find(this.selectors.support), this.$timer = this.$el.find(this.selectors.timer), this.$bar = this.$el.find(this.selectors.bar), this.$progress = this.$el.find(this.selectors.progress), this.$selector = this.$el.find(this.selectors.selector), this.$playerContainer = this.$el.find(this.selectors.playerContainer), this.player = this.video, this.scrabber = new Hammer(this.$bar[0]), this.$scrollItems = this.$el.find(this.selectors.scrollItems), this.scrollMagicController = new ScrollMagic.Controller, $.each(this.$scrollItems, this.initScrollMagic.bind(this)), this.$window.on("resize", this.onResize.bind(this)), this.$play.on("click", this.toggleVideo.bind(this)), this.videoDuration = this.video.duration, this.video.addEventListener("play", function() {
        this.videoIsPlaying(), this.setVideo(), gtag("event", "play", {
          event_category: "chuck"
        })
      }.bind(this)), this.video.addEventListener("pause", function() {
        this.videoIsPaused(), gtag("event", "pause", {
          event_category: "chuck"
        })
      }.bind(this)), this.video.addEventListener("ended", function() {
        this.videoIsEnded(), gtag("event", "ended", {
          event_category: "chuck"
        })
      }.bind(this)), this.video.addEventListener("timeupdate", function(t) {
        this.scrubberIsScrubbed || this.videoIsUpdating(100 * this.video.currentTime / this.video.duration, this.video.currentTime), this.video.currentTime >= 44 ? this.isShowed || (this.showSupportButton(), gtag("event", "show supprot button", {
          event_category: "chuck"
        })) : this.isShowed && this.hideSupportButton()
      }.bind(this)), this.$playerContainer.on("mouseenter", function() {}.bind(this)).on("mouseleave", function() {
        this.hideControls()
      }.bind(this)).on("mousemove", function() {
        this.isShowed || this.updateControlsState()
      }.bind(this)), this.scrabber.on("panstart", this.onPanStart.bind(this)).on("panend", this.onPanEnd.bind(this)).on("pan", this.onPan.bind(this)).on("tap", this.onTap.bind(this))
    },
    logging(false);
    //the function settimeout is not empty you should to give her a booling value in the feed of the tasklist issue there is a bug if you don't do that with the right feed in the issue
    // the function should have a booling value
    
const onReady = function (callback) {
  if (document.readyState === 'complete') {
    window.setTimeout(callback, 0);
  } else {
    window.addEventListener('load', callback, false);
  }
render: function() {
      setTimeout(function() {
        this.setVideo()
      }.bind(this), 1500)
    },
    initScrollMagic: function(t, e) {
      var i = TweenMax.fromTo(e, .4, {
        y: "50px",
        opacity: 0
      }, {
        y: "0px",
        opacity: 1,
        delay: 0,
        ease: "Power2.EaseInOut",
        onComplete: function() {
          TweenLite.set(e, {
            clearProps: "opacity"
          })
        }
      });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(i).addTo(this.scrollMagicController)
    },
    onResize: function() {
      this.setVideo()
    },
    showSupportButton: function() {
      this.isShowed = !0, TweenLite.to(this.$support, .3, {
        y: -100
      })
    },
    hideSupportButton: function() {
      this.isShowed = !1, TweenLite.to(this.$support, .3, {
        y: 0
      })
    },
    setVideo: function() {
      var t = this.$video.parent(),
        e = t.width() + 10,
        i = t.height(),
        s = e * (9 / 16),
        o = (i - s) / 2;
      this.$video.css({
        width: e + "px",
        height: s + "px",
        top: o + "px",
        left: "-5px"
      })
    },
    toggleVideo: function() {
      this.isVideoPlaying ? (this.pauseVideo(), this.$el.removeClass(this.states.isLoading)) : (this.$el.addClass(this.states.isLoading), this.playVideo())
    },
    playVideo: function() {
      this.video.play(), this.$el.removeClass(this.states.isLoading)
    },
    pauseVideo: function() {
      this.video.pause()
    },
    videoIsPlaying: function() {
      setTimeout(function() {
        this.isVideoPlaying = !0, this.$el.addClass(this.states.isPlaying).removeClass(this.states.isPaused), this.showControls()
      }.bind(this), 1e3)
    },
    videoIsPaused: function() {
      this.isVideoPlaying = !1, this.$el.removeClass(this.states.isPlaying).addClass(this.states.isPaused)
    },
    videoIsUpdating: function(t, e) {
      e = e > this.videoDuration ? this.videoDuration : e, e = e < 0 ? 0 : e;
      var i = Math.ceil(e % 60),
        s = Math.floor(e / 60);
      i < 10 && (i = "0" + i), t = t > 100 ? 100 : t, t = t < 0 ? 0 : t, TweenLite.set(this.$selector, {
        left: t + "%"
      }), TweenLite.set(this.$progress, {
        width: t + "%"
      }), this.$timer.html(s + ":" + i)
    },
    videoIsEnded: function() {
      this.$el.removeClass(this.states.isPlaying).removeClass(this.states.hasControls).removeClass(this.states.isPaused), this.isVideoPlaying = !1
    },
    hideControls: function() {
      this.$el.removeClass(this.states.hasControls)
    },
    showControls: function() {
      this.$el.addClass(this.states.hasControls), this.mouseMoveTimmer = setTimeout(function() {
        this.hideControls()
      }.bind(this), this.settings.timeToHide)
    },
    updateControlsState: function() {
      clearTimeout(this.mouseMoveTimmer), this.showControls()
    },
    onPan: function(t) {
      var e = (t.deltaX + this.vimeoDotLeftStart) / this.$bar.outerWidth();
      this.videoIsUpdating(100 * e, this.videoDuration * e)
    },
    onPanStart: function() {
      this.vimeoDotLeftStart = this.$selector.position().left, this.scrubberIsScrubbed = !0
    },
    onPanEnd: function(t) {
      var e = (t.deltaX + this.vimeoDotLeftStart) / this.$bar.outerWidth();
      this.scrubberIsScrubbed = !1, this.video.currentTime = this.videoDuration * e
    },
    onTap: function(t) {
      var e = (t.srcEvent.clientX - this.$bar.offset().left) / this.$bar.outerWidth();
      this.video.currentTime = this.videoDuration * e
    }
  }), Namespace.use("knucklebones.views"), knucklebones.views.Content = Backbone.View.extend({
    selectors: {
      case: "[data-content=case]",
      image: "[data-content=fitImage]",
      dot: '[data-content="sliderNav"]',
      item: "[data-content=sliderItem]",
      scrollItems: "[data-scrollMagic]",
      scrollItemsTwo: "[data-scrollMagic-two]",
      tip: '[data-view="knucklebones.views.Tip"]'
    },
    states: {
      isSet: "is_set",
      isActive: "is_active"
    },
    scene: [],
    sceneTips: [],
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$window = $(window), this.$case = this.$el.find(this.selectors.case), this.$image = this.$case.find(this.selectors.image), this.$dot = this.$el.find(this.selectors.dot), this.$item = this.$el.find(this.selectors.item), this.$scrollItems = this.$el.find(this.selectors.scrollItems), this.$scrollItemsTwo = this.$el.find(this.selectors.scrollItemsTwo), this.$var3 = this.$el.find(".var_3"), this.$tip = this.$el.find(this.selectors.tip), this.scrollMagicController = new ScrollMagic.Controller, $.each(this.$scrollItems, this.initScrollMagic.bind(this)), $.each(this.$scrollItemsTwo, this.initScrollMagic2.bind(this)), this.onResize(), this.$window.on("resize", this.onResize.bind(this)), this.currentSlide = 0, this.$dot.on("click", this.changeSlide.bind(this)), this.$item.hammer().on("swipeleft", function() {
        this.slideSlide(1)
      }.bind(this)).on("swiperight", function() {
        this.slideSlide(0)
      }.bind(this)), gtag("event", "slide", {
        event_category: "slider"
      })
    },
    render: function() {},
    changeSlide: function(t) {
      var e = $(t.currentTarget),
        i = e.index();
      gtag("event", "tap", {
        event_category: "slider"
      }), this.slideSlide(i)
    },
    slideSlide: function(t) {
      var e = this.$item.eq(t).find(".additional"),
        i = this.$item.eq(this.currentSlide).find(".additional"),
        s = 1;
      t !== this.currentSlide && (this.$dot.removeClass(this.states.isActive), this.$dot.eq(t).addClass(this.states.isActive), t < this.currentSlide && (s = -1), this.$item.eq(this.currentSlide).addClass("is_disabled"), this.$item.eq(t).removeClass("is_disabled"), TweenMax.fromTo(this.$item.eq(this.currentSlide), .75, {
        x: "0%",
        opacity: 1,
        scale: 1
      }, {
        x: -100 * s + "%",
        opacity: 0,
        scale: 1
      }), TweenMax.fromTo(this.$item.eq(t), .75, {
        x: 100 * s + "%",
        opacity: 0,
        scale: 1
      }, {
        x: "0%",
        opacity: 1,
        scale: 1,
        onComplete: function() {
          TweenMax.set(this.$item.eq(t), {
            clearProps: "transform"
          })
        }.bind(this)
      }), e.length && TweenMax.fromTo(e, .95, {
        x: 1 * s + "700px"
      }, {
        x: "0%"
      }), i.length && TweenMax.fromTo(i, .95, {
        x: "0px"
      }, {
        x: "400px"
      }), this.currentSlide = t)
    },
    onResize: function() {
      var t = this.$case.outerWidth();
      if (870 > t) {
        var e = -1 * (t - 870);
        this.$image.parent().css({
          position: "relative",
          width: "calc(100% + " + e + "px)",
          "margin-left": t - 870 + 60
        }), this.$image.addClass(this.states.isSet)
      } else this.$image.parent().css({
        width: "100%",
        "margin-left": "auto"
      });
      setTimeout(function() {
        window.Knucklebones.mq.query({
          from: "desktop"
        }) ? 0 === this.sceneTips.length && $.each(this.$tip.filter(".enableScroll"), this.tipMagicScroll.bind(this)) : ($.each(this.sceneTips, function(t, e) {
          e.destroy(!0), TweenMax.set(this.$tip.eq(t), {
            clearProps: "transform"
          })
        }.bind(this)), this.sceneTips = [])
      }.bind(this), 0)
    },
    addLoadListener: function() {
      this.listener = setInterval(function() {
        this.$image.hasClass("lazyloaded") && (clearInterval(this.listener), this.onResize())
      }.bind(this), 100)
    },
    initScrollMagic: function(t, e) {
      var i = $(e),
        s = this.$var3.index(i),
        o = i.hasClass("var_3") ? .1 * s : 0,
        n = TweenMax.fromTo(e, .4, {
          y: "50px",
          opacity: 0
        }, {
          y: "0px",
          opacity: 1,
          delay: o,
          ease: "Power2.EaseInOut",
          onComplete: function() {
            TweenMax.set(e, {
              clearProps: "transform"
            })
          }
        });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(n).addTo(this.scrollMagicController)
    },
    initScrollMagic2: function(t, e) {
      var i = $(e),
        s = this.$var3.index(i),
        o = i.hasClass("var_3") ? .1 * s : 0,
        n = TweenMax.fromTo(e, .4, {
          y: "50px",
          opacity: 1
        }, {
          y: "0px",
          opacity: 1,
          delay: o,
          ease: "Power2.EaseInOut",
          onComplete: function() {
            TweenMax.set(e, {
              clearProps: "transform"
            })
          }
        });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(n).addTo(this.scrollMagicController)
    },
    tipMagicScroll: function(t, e) {
      var i = TweenMax.fromTo(e, .5, {
        y: "350px",
        opacity: 1
      }, {
        y: "0px",
        opacity: 1,
        delay: .1 * t,
        ease: "Power2.EaseInOut"
      });
      this.sceneTips[t] = new ScrollMagic.Scene({
        triggerElement: this.$case.get(0),
        duration: .5 * this.$window.height() + 100 * t,
        triggerHook: 1,
        offset: 50
      }).setTween(i).addTo(this.scrollMagicController)
    }
  }), Namespace.use("knucklebones.views"), knucklebones.views.Gameplay = Backbone.View.extend({
    selectors: {
      item: "[data-nav=item]",
      header: '[data-view="knucklebones.views.Nav"]',
      section: "[data-nav=section]",
      card: "[data-gameplay=card]",
      playerContainer: "[data-gameplay=playerContainer]",
      accordion: "[data-gameplay=accordion]",
      closePlayer: "[data-gameplay=closePlayer]",
      vimeoContainer: "[data-gameplay=vimeo]",
      bones: "[data-gameplay=bones]",
      nextCard: "[data-gameplay=nextCard]",
      prevCard: "[data-gameplay=prevCard]",
      nextCardList: "[data-gameplay=nextCardList]",
      book: "[data-gameplay=book]",
      fixedBook: "[data-gameplay=fixedBook]",
      fixedBookReference: "[data-gameplay=fixedBookReference]",
      closeBook: "[data-gameplay=closeBook]",
      chapter: "[data-gameplay=chapter]",
      chapterContent: "[data-gameplay=chapterContent]",
      prevCardList: "[data-gameplay=prevCardList]",
      accordionItem: "[data-gameplay=accordionItem]",
      accordionTitle: "[data-gameplay=accordionTitle]",
      description: "[data-gameplay=description]",
      accordionDescription: "[data-gameplay=accordionDescription]",
      scrollItems: "[data-scrollMagic]"
    },
    states: {
      isVisible: "is_visible",
      isActive: "is_active",
      isOpen: "is_open",
      isDisabled: "is_disabled"
    },
    cardsData: [],
    scene: [],
    carts: [],
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$window = $(window), this.$document = $(document), this.$item = $("body").find(this.selectors.item), this.$section = $("body").find(this.selectors.section), this.$header = $("body").find(this.selectors.header), this.$card = this.$el.find(this.selectors.card), this.$bones = this.$el.find(this.selectors.bones), this.$closePlayer = this.$el.find(this.selectors.closePlayer), this.$accordion = this.$el.find(this.selectors.accordion), this.$nextCard = this.$el.find(this.selectors.nextCard), this.$prevCard = this.$el.find(this.selectors.prevCard), this.$description = this.$el.find(this.selectors.description), this.$nextCardList = this.$el.find(this.selectors.nextCardList), this.$prevCardList = this.$el.find(this.selectors.prevCardList), this.$chapter = this.$el.find(this.selectors.chapter), this.$chapterContent = this.$el.find(this.selectors.chapterContent), this.$playerContainer = this.$el.find(this.selectors.playerContainer), this.$vimeoContainer = this.$el.find(this.selectors.vimeoContainer), this.$book = this.$el.find(this.selectors.book), this.$fixedBook = this.$el.find(this.selectors.fixedBook), this.$fixedBookReference = this.$el.find(this.selectors.fixedBookReference), this.$closeBook = this.$el.find(this.selectors.closeBook), this.$accordionTitle = this.$el.find(this.selectors.accordionTitle), this.$accordionItem = this.$el.find(this.selectors.accordionItem), this.$scrollItems = this.$el.find(this.selectors.scrollItems), this.$var3 = this.$el.find(".var_3"), this.scrollMagicController = new ScrollMagic.Controller, $.each(this.$scrollItems, this.initScrollMagic.bind(this)), $.each(this.$card, this.initScrollCarts.bind(this)), window.Knucklebones.mq.query({
        from: "tablet"
      }) ? (console.log("Set bones scroll"), $.each(this.$bones, this.initScrollBones.bind(this))) : console.log("NO Set bones scroll"), this.initBookScrollMagic(), this.$card.hammer().on("tap", this.cardTap.bind(this)), this.$accordionTitle.hammer().on("tap", this.accordionToggle.bind(this)), this.$closePlayer.hammer().on("tap", this.hideVideo.bind(this)), this.$el.on("kb.videos.close", this.hideVideo.bind(this)), this.$el.on("kb.book.close", this.closeBook.bind(this)), this.$chapter.on("click", this.changeChapter.bind(this)), this.$nextCard.hammer().on("tap", this.showNextCard.bind(this)), this.$prevCard.hammer().on("tap", this.showPrevCard.bind(this)), this.$window.on("resize", this.onResize.bind(this)), this.$document.on("knucklebones.viewchange", function(t, e, i) {
        this.cartIsSet && ("mobile" === i.name ? this.hideVideo() : (TweenLite.set(this.$card, {
          x: 0,
          y: 0
        }), this.cartIsSet = !1, this.setCardsPosition()))
      }.bind(this))
    },
    render: function() {},
    onResize: function() {
      this.player && setTimeout(function() {
        this.$vimeoContainer.find("iframe").attr("width", this.$vimeoContainer.width()).attr("height", .5625 * this.$vimeoContainer.width())
      }.bind(this), 200), setTimeout(function() {
        this.initBookScrollMagic(), this.cartIsSet && this.setCardsPosition()
      }.bind(this), 0)
    },
    initScrollMagic: function(t, e) {
      var i = $(e),
        s = this.$var3.index(i),
        o = i.hasClass("var_3") ? .1 * s : 0,
        n = TweenMax.fromTo(e, .4, {
          y: "50px",
          opacity: 0
        }, {
          y: "0px",
          opacity: 1,
          delay: o,
          ease: "Power2.EaseInOut"
        });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(n).addTo(this.scrollMagicController)
    },
    initBookScrollMagic: function() {
      window.Knucklebones.mq.query({
        from: "desktop"
      }) ? this.isShowed || (this.bookScrollMagic && this.bookScrollMagic.destroy(!0), this.bookScrollMagic = new ScrollMagic.Scene({
        triggerElement: $(".gameplay_content").get(0),
        duration: this.$accordion.offset().top - $(".gameplay_content").offset().top + this.$accordion.outerHeight() - this.$book.outerHeight() - (this.$book.parent().outerHeight() - this.$book.outerHeight()) / 2,
        triggerHook: 0,
        offset: -50
      }).setPin(this.$book.get(0)).addTo(this.scrollMagicController)) : this.bookScrollMagic && this.bookScrollMagic.destroy(!0)
    },
    initScrollCarts: function(t, e) {
      var i = $(e),
        s = .1 * t,
        o = [100, 150, 200, 250, 300],
        n = o[Math.floor(Math.random() * o.length)],
        a = TweenMax.fromTo(e, .4, {
          y: n,
          opacity: 1
        }, {
          y: "0px",
          opacity: 1,
          delay: s,
          ease: "Power0.easeNone"
        });
      this.carts[t] = new ScrollMagic.Scene({
        triggerElement: i.parent().get(0),
        duration: .5 * this.$window.height(),
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(a).addTo(this.scrollMagicController)
    },
    initScrollBones: function(t, e) {
      var i = $(e),
        s = .02 * t,
        o = [200, 250, 300, 350, 400],
        n = o[Math.floor(Math.random() * o.length)],
        a = TweenMax.fromTo(e, .4, {
          y: n,
          opacity: 1
        }, {
          y: "-150px",
          opacity: 1,
          delay: s,
          ease: "Power0.easeNone"
        });
      this.carts[t] = new ScrollMagic.Scene({
        triggerElement: i.parent().get(0),
        duration: this.$window.height() - 100 * t,
        triggerHook: 1,
        offset: 50
      }).setTween(a).addTo(this.scrollMagicController)
    },
    cardTap: function(t) {
      var e = $(t.currentTarget),
        i = e.index();
      if ("mobile" === window.Knucklebones.mq.currentBreakpoint.name) {
        var s = e.find("iframe").attr("src");
        window.open(s, "_blank"), console.log(s)
      } else this.showVideo(i)
    },
    showNextCard: function() {
      this.currentCardIndex++, this.currentCardIndex < this.$card.length ? this.showVideo(this.currentCardIndex) : this.currentCardIndex--
    },
    showPrevCard: function() {
      this.currentCardIndex > 0 && (this.currentCardIndex--, this.showVideo(this.currentCardIndex))
    },
    checkPrevNextState: function() {
      var t, e, i = -this.$nextCardList.find("li:first").outerHeight();
      this.currentCardIndex === this.$card.length - 1 ? this.$nextCard.addClass(this.states.isDisabled) : this.$nextCard.removeClass(this.states.isDisabled), 0 === this.currentCardIndex ? this.$prevCard.addClass(this.states.isDisabled) : this.$prevCard.removeClass(this.states.isDisabled), t = this.currentCardIndex < this.$card.length - 1 ? this.currentCardIndex + 1 : this.currentCardIndex, e = this.currentCardIndex > 0 ? this.$card.length - this.currentCardIndex : this.$card.length - 1, TweenLite.set(this.$nextCardList, {
        y: i * t
      }), TweenLite.set(this.$prevCardList, {
        y: i * e
      })
    },
    showVideo: function(t) {
      this.bookScrollMagic && this.bookScrollMagic.destroy(!0), 0 === this.cardsData.length && this.getCardsData(), this.$el.trigger("kb.book.close"), gtag("event", "showvideo", {
        event_category: "gameplay",
        event_label: "cart",
        value: t
      }), this.$playerContainer.hasClass(this.states.isVisible) ? (this.moveCardsIn(t), this.loadVideo(t)) : (this.loadVideo(t), this.moveCardsIn(t), this.moveBonesOut(), this.showPlayer()), this.checkPrevNextState()
    },
    hideVideo: function() {
      this.hidePlayer(), this.moveCardsOut(), this.moveBonesIn(), this.player && this.player.pause()
    },
    showPlayer: function() {
      if (!this.isShowed) {
        this.isShowed = !0;
        var t = .5625 * this.$playerContainer.width();
        TweenLite.set(this.$playerContainer, {
          height: "auto"
        }), TweenLite.from(this.$playerContainer, .5, {
          height: 0
        }), TweenLite.set(this.$closePlayer, {
          clearProps: "top"
        }), TweenLite.set(this.$closePlayer, {
          top: "+=" + t / 2
        }), $("body, html").animate({
          scrollTop: this.$vimeoContainer.offset().top - 50
        }, 500)
      }
    },
    hidePlayer: function() {
      TweenLite.to(this.$playerContainer, .5, {
        height: 0,
        onComplete: function() {
          this.initBookScrollMagic()
        }.bind(this)
      }), this.isShowed = !1
    },
    loadVideo: function(t) {
      var e = this.$card.eq(t).data("options"),
        i = e.desc,
        s = {
          id: e.vid,
          byline: !1,
          width: Math.round(this.$vimeoContainer.width())
        };
      this.$description.append("<div>" + i + "</div>"), TweenLite.to(this.$description.find("div:first"), .5, {
        y: "-30px",
        opacity: 0,
        onComplete: function() {
          this.$description.find("div:first").remove()
        }.bind(this)
      }), TweenLite.from(this.$description.find("div:last"), .5, {
        y: "30px",
        opacity: 0,
        onComplete: function() {}
      }), this.player ? this.player.loadVideo(e.vid).then(function() {
        this.player.play()
      }.bind(this)) : (this.player = new Vimeo.Player("gameplay_vimeo_container", s), this.player.ready().then(function() {
        this.player.play()
      }.bind(this)), this.player.on("ended", function() {
        this.currentCardIndex < this.$card.length - 1 && (this.currentCardIndex++, setTimeout(function() {
          this.showVideo(this.currentCardIndex)
        }.bind(this), 3e3))
      }.bind(this)))
    },
    moveCardsIn: function(t) {
      this.currentCardIndex = t, this.setCardsPosition()
    },
    setCardsPosition: function() {
      this.cartIsSet || this.getCardsData(), _.each(this.$card, function(t, e) {
        var i = $(t),
          s = i.parent(),
          o = s.parent(),
          n = this.cardsData[e].top + this.cardsData[e].parent.top,
          a = o.outerHeight(),
          h = .5625 * this.$playerContainer.width(),
          c = 0,
          r = a - n + h + .75 * i.height();
        this.currentCardIndex === e && (r = a - n + h + i.height() / 2), c = $(window).width() / 2 - this.cardsData[e].left - (3 - e) * (this.cardsData[0].width + 14), i.addClass(this.states.isActive), this.cartIsSet ? TweenLite.to(i, .4, {
          x: c,
          y: r,
          delay: 0,
          ease: "Power4.easeOut"
        }) : TweenLite.to(i, .4, {
          x: c,
          y: r,
          delay: .3 + .1 * e,
          ease: "Power4.easeOut"
        })
      }.bind(this)), this.cartIsSet = !0
    },
    moveCardsOut: function() {
      _.each(this.$card, function(t, e) {
        TweenLite.to(t, 1, {
          x: 0,
          y: 0,
          delay: .05 * e,
          ease: "Power4.easeOut",
          onComplete: function() {
            TweenLite.set(t, {
              clearProps: "transform"
            }), this.$card.removeClass(this.states.isActive)
          }.bind(this)
        })
      }.bind(this)), this.cartIsSet = !1
    },
    moveBonesOut: function() {
      var t = [.3, .35, .4, .45, .5, .55, .6];
      _.each(this.$bones, function(e, i) {
        var s = $(e),
          o = s.offset().left - s.position().left - 80,
          n = t[Math.floor(Math.random() * t.length)],
          a = 70 + 100 * n;
        TweenLite.to(e, n, {
          x: -o,
          y: "-=" + a,
          delay: .1 * i,
          ease: "Power4.easeOut"
        })
      })
    },
    moveBonesOutBook: function() {
      var t = [.3, .35, .4, .45, .5, .55, .6];
      _.each(this.$bones, function(e, i) {
        TweenLite.set(e, {
          x: 0,
          y: 0
        });
        var s = $(e),
          o = (this.$window.width() - s.parent().offset().left) / 2 + s.position().left / 2,
          n = t[Math.floor(Math.random() * t.length)],
          a = 200 * n;
        TweenLite.to(e, n, {
          x: o,
          y: "-=" + a,
          delay: .1 * i,
          ease: "Power4.easeOut"
        })
      }.bind(this))
    },
    moveBonesIn: function() {
      _.each(this.$bones, function(t, e) {
        TweenLite.to(t, .5, {
          x: 0,
          y: 0,
          delay: .05 * e,
          ease: "Power4.easeOut"
        })
      }.bind(this))
    },
    getCardsData: function() {
      this.cardsData = [], _.each(this.$card, function(t) {
        var e = $(t),
          i = {
            left: e.offset().left,
            top: e.position().top,
            width: e.width(),
            parent: {
              top: e.parent().position().top,
              left: e.parent().offset().left
            }
          };
        this.cardsData.push(i)
      }.bind(this))
    },
    toggleBook: function() {
      this.$book.hasClass(this.states.isOpen) ? this.closeBook() : this.openBook()
    },
    openBook: function() {
      var t = this.$accordion.offset().top - this.$book.offset().top + 130;
      window.Knucklebones.mq.query({
        to: "wide"
      }) && (t = 0), $("body,html").animate({
        scrollTop: this.$accordionItem.eq(0).offset().top - 48
      }, 500), TweenLite.to(this.$book, .5, {
        y: "+=" + t,
        onComplete: function() {
          this.$book.addClass(this.states.isOpen)
        }.bind(this)
      })
    },
    closeBook: function() {
      var t = (this.$book.parent().outerHeight() - this.$book.outerHeight()) / 2 + 50;
      t = -this.$book.outerHeight() / 2, this.$book.hasClass(this.states.isOpen) && (this.moveBonesIn(), this.$book.removeClass(this.states.isOpen), TweenLite.to($(".gameplay_accordion"), .5, {
        height: "0px"
      }), TweenLite.to(this.$book, .5, {
        y: t,
        onComplete: function() {
          this.$book.on("tap", this.openBook.bind(this))
        }.bind(this)
      }))
    },
    changeChapter: function(t) {
      t.stopPropagation();
      var e = $(t.currentTarget),
        i = this.$chapter.index(e),
        s = this.$chapterContent.filter(".is_opened").index();
      this.$chapterContent.removeClass("is_opened"), this.$chapterContent.eq(i).addClass("is_opened"), s < i ? TweenLite.to(this.$chapterContent.eq(i).find(".book_center_front"), .5, {
        rotationY: "0deg"
      }) : (TweenLite.to(this.$chapterContent.eq(s).find(".book_center_front"), .5, {
        rotationY: "180deg"
      }), TweenLite.to(this.$chapterContent.eq(s).find(".book_pages_back"), .5, {
        rotationY: "0deg"
      }))
    },
    accordionToggle: function(t) {
      var e = $(t.currentTarget).closest(this.selectors.accordionItem),
        i = e.index(),
        s = e.hasClass(this.states.isOpen);
      gtag("event", "accordion", {
        event_category: "gameplay",
        event_label: "expand",
        value: i
      }), s ? this.accordionClose(i) : (this.accordionOpen(i), _.each(this.$accordionTitle, function(t, e) {
        e !== i && this.accordionClose(e)
      }.bind(this))), setTimeout(function() {
        this.initBookScrollMagic()
      }.bind(this), 510)
    },
    accordionOpen: function(t) {
      this.$accordionItem.eq(t).addClass(this.states.isOpen), TweenLite.set(this.$accordionItem.eq(t).find(this.selectors.accordionDescription), {
        height: "auto"
      }), TweenLite.from(this.$accordionItem.eq(t).find(this.selectors.accordionDescription), .5, {
        height: 0,
        delay: .5
      })
    },
    accordionClose: function(t) {
      var e = this.$accordionItem.eq(t).find(this.selectors.accordionDescription),
        i = e.outerHeight(),
        s = $(window).scrollTop();
      i > $(window).height() - 100 && $("html,body").scrollTop(s - i), TweenLite.to(e, .5, {
        height: 0,
        onComplete: function() {
          this.$accordionItem.eq(t).removeClass(this.states.isOpen), TweenLite.set(e, {
            clearProps: "height"
          })
        }.bind(this)
      })
    }
  }), Namespace.use("knucklebones.views"), knucklebones.views.Nav = Backbone.View.extend({
    selectors: {
      section: "[data-nav=section]",
      selector: "[data-nav=selector]",
      item: "[data-nav=item]",
      header: '[data-view="knucklebones.views.Nav"]',
      mobileMenu: "[data-nav=burger]",
      newsletter: "[data-nav=newsletter]"
    },
    settings: {},
    data: {
      bodyHeight: 0
    },
    scene: [],
    states: {
      isActive: "is_active"
    },
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$body = $("body"), this.$section = this.$body.find(this.selectors.section), this.$team = this.$body.find(".team.is_hidden"), this.$item = this.$el.find(this.selectors.item), this.$selector = this.$el.find(this.selectors.selector), this.$currentItem = this.$section.filter(":first"), this.$header = this.$body.find(this.selectors.header), this.$burger = this.$el.find(this.selectors.mobileMenu), this.$newsletter = $(this.selectors.newsletter), this.scrollMagicController = new ScrollMagic.Controller, this.moveSelector(), $.each(this.$section, this.initScrollMagic.bind(this)), $(window).on("resize", this.moveSelector.bind(this)), this.$item.on("click", "a", function(t) {
        t.preventDefault()
      }), this.$item.hammer().on("tap", this.scrollToSection.bind(this)), this.$newsletter.hammer().on("tap", this.checkMenuState.bind(this)), this.heightWatcher = setInterval(this.heightWatcherHandler.bind(this), 100), $("#menu_burger_input").on("change", this.checkNewsletterState.bind(this))
    },
    initScrollMagic: function(t, e) {
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: .5,
        offset: 0
      }).on("enter", function() {
        this.$currentItem = $(e), this.moveSelector(), this.$currentItem.hasClass("gameplay") && $("body").find(".team.is_fixed").removeClass("is_hidden")
      }.bind(this)).on("leave", function() {
        this.$currentItem = $(e).prevAll(this.selectors.section).filter(":first"), this.moveSelector(), $(e).hasClass("gameplay") && $("body").find(".team.is_fixed").addClass("is_hidden")
      }.bind(this)).addTo(this.scrollMagicController)
    },
    heightWatcherHandler: function() {
      var t = this.$body.outerHeight();
      this.data.bodyHeight !== t && (this.data.bodyHeight = t)
    },
    checkMenuState: function() {
      $("#menu_burger_input").is(":checked") && $("#menu_burger_input").prop("checked", !1)
    },
    checkNewsletterState: function() {
      $("#newsletter_form").prop("checked", !1)
    },
    moveSelector: function() {
      var t = this.$section.index(this.$currentItem),
        e = this.$item.eq(t),
        i = e.find("span"),
        s = i.outerWidth(),
        o = i.offset().left;
      this.$item.removeClass(this.states.isActive), e.addClass(this.states.isActive), TweenLite.set(this.$selector.get(0), {
        width: s,
        left: o
      })
    },
    scrollToSection: function(t) {
      t.stopPropagation();
      var e = $(t.currentTarget),
        i = 0,
        s = this.$section.eq(e.index()).offset().top;
      window.Knucklebones.mq.query({
        from: "desktop"
      }) && (s -= this.$header.height(), i = Math.max(.5, Math.abs(e.index() - this.$currentItem.index())), 4 === e.index() && (s += 50)), TweenLite.to(window, .5 * i, {
        scrollTo: s,
        onComplete: function() {
          this.$burger.prop("checked", !1)
        }.bind(this)
      })
    },
    render: function() {}
  }), Namespace.use("knucklebones.views"), knucklebones.views.Newsletter = Backbone.View.extend({
    selectors: {
      form: "[data-newsletter=form]",
      button: "[data-newsletter=submit]",
      email: "[data-newsletter=email]"
    },
    settings: {},
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$submit = this.$el.find(this.selectors.button), this.$form = this.$el.find(this.selectors.form), this.$email = this.$el.find(this.selectors.email), this.$submit.on("click", this.addToList.bind(this)), this.$form.on("submit", this.addToList.bind(this)), this.$email.on("focus", this.onFocus.bind(this))
    },
    render: function() {},
    addToList: function(t) {
      t.preventDefault(), this.isEmailValid() ? (this.$el.addClass("is_waiting"), $.ajax({
        url: "newsletter.php",
        method: "POST",
        data: {
          email: this.$email.val()
        }
      }).done(function(t) {
        200 === t.status ? (this.$el.addClass("is_added"), $("body").addClass("signed_up_to_newsletter"), this.$el.removeClass("is_waiting"), this.$email.val(""), gtag("event", "signup", {
          event_category: "newsletter",
          event_label: "popup"
        }), gtag("event", "conversion", {
          send_to: "AW-758446846/3s16COiRsZYBEP710-kC"
        }), fbq("track", "Contact"), setTimeout(function() {
          this.closeSection()
        }.bind(this), 5e3)) : setTimeout(function() {
          this.$el.removeClass("is_added"), this.$el.removeClass("is_waiting")
        }.bind(this), 5e3)
      }.bind(this))) : this.showErrorMessage()
    },
    isEmailValid: function() {
      var t = this.$email.val();
      return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(t).toLowerCase())
    },
    closeSection: function() {
      this.$el.removeClass("is_added"), this.$el.removeClass("is_waiting"), this.$el.addClass("is_error"), $("#newsletter_form").prop("checked", !1)
    },
    showErrorMessage: function() {
      this.$el.addClass("is_error")
    },
    onFocus: function() {
      this.$el.removeClass("is_error")
    }
  }), Namespace.use("knucklebones.views"), knucklebones.views.Packages = Backbone.View.extend({
    selectors: {
      nav: "[data-packages=nav]",
      desc: "[data-packages=desc]",
      price: "[data-packages=price]",
      title: "[data-packages=title]",
      accordion: "[data-packages=accordion]",
      dot: "[data-packages=dot]",
      label: "[data-packages=label]",
      accordionItem: "[data-packages=accordionItem]",
      accordionTitle: "[data-packages=accordionTitle]",
      accordionDescription: "[data-packages=accordionDescription]",
      scrollItems: "[data-scrollMagic]",
      scrollItems2: "[data-scrollMagic2]"
    },
    states: {
      isActive: "is_active",
      isOpen: "is_open"
    },
    scene: [],
    labels: [],
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$window = $(window), this.$nav = this.$el.find(this.selectors.nav), this.$title = this.$el.find(this.selectors.title), this.$desc = this.$el.find(this.selectors.desc), this.$price = this.$el.find(this.selectors.price), this.$dot = this.$el.find(this.selectors.dot), this.$label = this.$el.find(this.selectors.label), this.backgroundWidth = this.$el.find("[data-packages=bg]").width(), this.mateWidth = this.$el.find("[data-packages=mat]").width(), this.etuiWidth = this.$el.find("[data-packages=etui2]").width(), this.bagWidth = this.$el.find("[data-packages=bag1]").width(), this.$accordionTitle = this.$el.find(this.selectors.accordionTitle), this.$accordionItem = this.$el.find(this.selectors.accordionItem), this.$accordion = this.$el.find(this.selectors.accordion), this.$images = this.$el.find("[data-packages=images]"), this.$etui1 = this.$el.find("[data-packages=etui1]"), this.$etui21 = this.$el.find("[data-packages=etui2_1]"), this.$etui2 = this.$el.find("[data-packages=etui2]"), this.$etui3 = this.$el.find("[data-packages=etui3]"), this.$etui4 = this.$el.find("[data-packages=etui4]"), this.$etui5 = this.$el.find("[data-packages=etui5]"), this.$mat = this.$el.find("[data-packages=mat]"), this.$mat2 = this.$el.find("[data-packages=mat2]"), this.$mat3 = this.$el.find("[data-packages=mat3]"), this.$mat4 = this.$el.find("[data-packages=mat4]"), this.$mat5 = this.$el.find("[data-packages=mat5]"), this.$notepad1 = this.$el.find("[data-packages=notepad1]"), this.$bag1 = this.$el.find("[data-packages=bag1]"), this.$bag2 = this.$el.find("[data-packages=bag2]"), this.$bag3 = this.$el.find("[data-packages=bag3]"), this.$bag4 = this.$el.find("[data-packages=bag4]"), this.$bag5 = this.$el.find("[data-packages=bag5]"), this.$deck0 = this.$el.find("[data-packages=deck0]"), this.$deck1 = this.$el.find("[data-packages=deck1]"), this.$deck2 = this.$el.find('[data-packages="deck2"]'), this.$deck21 = this.$el.find('[data-packages="deck2_1"]'), this.$deck3 = this.$el.find("[data-packages=deck3]"), this.$deck4 = this.$el.find("[data-packages=deck4]"), this.$deck5 = this.$el.find("[data-packages=deck5]"), this.$background = this.$el.find("[data-packages=bg]"), this.$scrollItems = this.$el.find(this.selectors.scrollItems), this.$scrollItems2 = this.$el.find(this.selectors.scrollItems2), this.scrollMagicController = new ScrollMagic.Controller, $.each(this.$scrollItems, this.initScrollMagic.bind(this)), $.each(this.$scrollItems2, this.initScrollMagic2.bind(this)), $.each(this.$label, this.initScrollMagicLabel.bind(this)), $.each(this.$dot, this.initScrollMagicDot.bind(this)), this.sizes = {
        height: this.$etui1.outerHeight(),
        middle: this.$images.position().top + 15,
        left: this.$etui1.offset().left
      }, this.$nav.hammer().on("tap", this.changeSlide.bind(this)), this.$accordionTitle.hammer().on("tap", this.accordionToggle.bind(this)), this.$window.on("resize", function() {
        this.changeContent(this.index)
      }.bind(this))
    },
    render: function() {},
    initScrollMagic: function(t, e) {
      var i = TweenMax.fromTo(e, .4, {
        y: "50px",
        opacity: 0
      }, {
        y: "0px",
        opacity: 1,
        delay: 0,
        ease: "Power2.EaseInOut",
        onComplete: function() {
          TweenLite.set(e, {
            clearProps: "opacity"
          })
        }
      });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(i).addTo(this.scrollMagicController)
    },
    initScrollMagic2: function(t, e) {
      var i = TweenMax.fromTo(e, .4, {
        y: "50px",
        opacity: 1
      }, {
        y: "0px",
        opacity: 1,
        delay: 0,
        ease: "Power2.EaseInOut",
        onComplete: function() {
          TweenLite.set(e, {
            clearProps: "opacity"
          })
        }
      });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 0,
        triggerHook: 1,
        offset: 50
      }).reverse(!1).setTween(i).addTo(this.scrollMagicController)
    },
    initScrollMagicLabel: function(t, e) {
      var i = TweenMax.fromTo(e, .4, {
        y: "50px",
        opacity: 0
      }, {
        y: "0px",
        opacity: 1,
        delay: .1 * t,
        ease: "Power2.EaseInOut",
        onComplete: function() {
          TweenLite.set(e, {
            clearProps: "opacity"
          })
        }
      });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: this.$el.find(".packages_nav_list").get(0),
        duration: 100,
        triggerHook: 1,
        offset: 50
      }).setTween(i).addTo(this.scrollMagicController)
    },
    initScrollMagicDot: function(t, e) {
      var i = $(e),
        s = 0 === this.$dot.index(i) ? 0 : i.parent().position().left - this.$dot.eq(0).parent().position().left,
        o = TweenMax.fromTo(e, .4, {
          x: -1 * s,
          opacity: 0
        }, {
          x: "0px",
          opacity: 1,
          delay: 0,
          ease: "Power2.EaseInOut",
          onComplete: function() {
            TweenLite.set(e, {
              clearProps: "opacity"
            })
          }
        });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: 100,
        triggerHook: 1,
        offset: 30
      }).setTween(o).addTo(this.scrollMagicController)
    },
    changeSlide: function(t) {
      var e = $(t.currentTarget),
        i = e.index();
      gtag("event", "slider tap", {
        event_category: "packages",
        event_label: "see package",
        value: i
      }), this.changeNav(i), this.changeTitle(i), this.changeDesc(i), this.changePrice(i), this.changeContent(i)
    },
    changeNav: function(t) {
      this.$nav.removeClass(this.states.isActive), this.$nav.eq(t).addClass(this.states.isActive)
    },
    changePrice: function(t) {
      this.$price.removeClass(this.states.isActive), this.$price.eq(t).addClass(this.states.isActive)
    },
    changeTitle: function(t) {
      var e = this.$title.filter("." + this.states.isActive),
        i = this.$title.eq(t),
        s = 1;
      e.removeClass(this.states.isActive), i.addClass(this.states.isActive), t < e.index() && (s = -1), TweenLite.fromTo(e, .4, {
        y: 0,
        opacity: 1,
        scale: 1
      }, {
        y: -30 * s,
        opacity: 0,
        scale: .9
      }), TweenLite.fromTo(i, .4, {
        y: 30 * s,
        opacity: 0,
        scale: .9
      }, {
        y: 0,
        opacity: 1,
        scale: 1
      })
    },
    changeDesc: function(t) {
      var e = this.$desc.filter("." + this.states.isActive),
        i = this.$desc.eq(t),
        s = -1;
      e.removeClass(this.states.isActive), i.addClass(this.states.isActive), t < e.index() && (s = 1), TweenLite.fromTo(e, .4, {
        y: 0,
        opacity: 1,
        scale: 1
      }, {
        y: -30 * s,
        opacity: 0,
        scale: .9
      }), TweenLite.fromTo(i, .4, {
        y: 30 * s,
        opacity: 0,
        scale: .9
      }, {
        y: 0,
        opacity: 1,
        scale: 1
      })
    },
    changeContent: function(t) {
      var e, i, s, o, n, a, h, c = $(".packages_mainpackage").height();
      this.index = t, this.sizes.middle = this.$images.position().top + 15, 0 === t ? (TweenLite.fromTo(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "0deg",
        opacity: 1
      }, {
        rotation: "-30deg",
        opacity: 0
      }), TweenLite.to(this.$deck1, .5, {
        scale: 1,
        x: -this.$el.find("[data-packages=deck1]").parent().offset().left - 274
      }), TweenLite.to(this.$etui1, .5, {
        scale: "1",
        x: "0%",
        y: 0
      }), TweenLite.to(this.$deck2, .5, {
        x: -this.$deck1.parent().offset().left - 274,
        opacity: 0
      }), TweenLite.to(this.$mat, .5, {
        y: -this.$mat.height(),
        opacity: 0
      }), TweenLite.to([this.$mat2, this.$mat3, this.$mat4, this.$mat5], .5, {
        x: "-=80",
        opacity: 0
      }), TweenLite.to([this.$notepad1], .5, {
        opacity: 0,
        y: "-=100"
      }), TweenLite.to([this.$bag1, this.$bag2, this.$bag3, this.$bag4, this.$bag5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 100 * t
        }
      }), TweenLite.to([this.$deck21, this.$deck3, this.$deck4, this.$deck5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 40 * (t + 1)
        }
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 0,
        x: "-=400"
      }), TweenLite.to(this.$etui2, .5, {
        scale: 1,
        x: 0,
        y: 0,
        opacity: 0
      }), TweenLite.to([this.$etui21, this.$etui3, this.$etui4, this.$etui5], .5, {
        scale: .5,
        x: 400,
        y: -90,
        opacity: 0
      }), TweenLite.to(this.$el.find("[data-packages=bg]"), .5, {
        scale: "1"
      }), this.state = 0) : 1 === t ? (h = .6 * this.$window.width() / 2, TweenLite.to(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "30deg",
        opacity: 1
      }), TweenLite.to(this.$mat, .5, {
        left: "10%",
        x: 0,
        opacity: 0
      }), TweenLite.to(this.$mat2, .5, {
        y: -this.$mat.height(),
        x: 0,
        opacity: 0
      }), TweenLite.to(this.$deck1, .5, {
        x: h,
        y: this.sizes.middle,
        opacity: 1,
        scale: 1
      }), TweenLite.to(this.$deck2, .5, {
        x: -this.$el.find("[data-packages=deck1]").parent().offset().left - 274
      }), TweenLite.to(this.$etui1, .5, {
        scale: "1",
        x: "0%",
        y: 0
      }), TweenLite.to([this.$notepad1], .5, {
        opacity: 0,
        y: "-=100"
      }), TweenLite.to([this.$bag1, this.$bag2, this.$bag3, this.$bag4, this.$bag5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 100 * t
        }
      }), TweenLite.to([this.$mat3, this.$mat4, this.$mat5], .5, {
        x: "-=80",
        opacity: 0
      }), TweenLite.to([this.$deck21, this.$deck3, this.$deck4, this.$deck5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 40 * (t + 1)
        }
      }), TweenLite.to(this.$etui2, .5, {
        scale: 1,
        x: 0,
        y: 0,
        opacity: 0
      }), TweenLite.to([this.$etui21, this.$etui3, this.$etui4, this.$etui5], .5, {
        scale: .5,
        x: 400,
        y: -90,
        opacity: 0
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 0,
        x: "-=400"
      }), TweenLite.to(this.$mat, .5, {
        y: 0,
        opacity: 1,
        scale: 1
      }), TweenLite.to(this.$el.find("[data-packages=bg]"), .5, {
        scale: "1"
      }), this.state = 1) : 2 === t ? (h = .6 * this.$window.width() / 2, TweenLite.to(this.$mat2, .5, {
        y: -this.$mat.height(),
        x: 0,
        opacity: 0
      }), TweenLite.to(this.$deck1, .5, {
        x: h,
        y: this.sizes.middle,
        opacity: 1,
        scale: 1
      }), TweenLite.to(this.$deck2, .5, {
        x: -this.$deck1.parent().offset().left - 274
      }), TweenLite.to(this.$etui1, .5, {
        scale: "1",
        x: 0,
        y: 0
      }), TweenLite.to([this.$etui21, this.$etui3], .5, {
        scale: .5,
        x: 400,
        y: -90,
        opacity: 0
      }), TweenLite.to(this.$mat, .5, {
        left: "10%",
        x: 0,
        y: 0,
        opacity: 1,
        scale: 1
      }), TweenLite.to([this.$notepad1], .5, {
        opacity: 0,
        y: "-=100"
      }), TweenLite.to(this.$el.find("[data-packages=bg]"), .5, {
        scale: "1"
      }), TweenLite.to([this.$notepad1], .5, {
        opacity: 0,
        y: "-=100"
      }), TweenLite.to([this.$bag1, this.$bag2, this.$bag3, this.$bag4, this.$bag5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 100 * t
        }
      }), TweenLite.to([this.$mat3, this.$mat4, this.$mat5], .5, {
        x: "-=80",
        opacity: 0
      }), TweenLite.to([this.$deck21, this.$deck3, this.$deck4, this.$deck5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 40 * (t + 1)
        }
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 0,
        x: "-=400"
      }), TweenLite.to(this.$etui2, .5, {
        scale: 1,
        x: 0,
        y: 0,
        opacity: 0
      }), TweenLite.to([this.$etui21, this.$etui3, this.$etui4, this.$etui5], .5, {
        scale: .5,
        x: 400,
        y: -90,
        opacity: 0
      }), TweenLite.fromTo(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "0deg",
        opacity: 1
      }, {
        rotation: "-30deg",
        opacity: 0
      }), this.state = 2) : 3 === t ? (i = .4 * this.$window.width() / 2, e = $(".packages_images").position().top - 1 * $(".packages_inner").css("padding-top").replace("px", "") - 50, s = this.$window.width() / 2 - this.mateWidth / 2 - 240, o = s + 100, a = .6 * this.etuiWidth / 2 - 90, TweenLite.to(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "-30deg",
        opacity: 0
      }), TweenLite.to([this.$mat], .5, {
        left: 0,
        y: e,
        opacity: 1,
        x: s,
        scale: .37
      }), TweenLite.to([this.$mat2], .5, {
        y: e,
        opacity: 1,
        x: o,
        scale: .37
      }), TweenLite.to([this.$mat3, this.$mat4, this.$mat5], .5, {
        y: e,
        x: c - 20,
        scale: .37
      }), TweenLite.to(this.$deck1, .5, {
        opacity: 1,
        x: s + 80,
        scale: .5,
        y: this.sizes.middle - 50
      }), TweenLite.to(this.$deck2, .5, {
        opacity: 1,
        x: s + 100,
        scale: .5,
        y: this.sizes.middle + 80
      }), TweenLite.to(this.$background, .5, {
        scale: .6
      }), TweenLite.to([this.$etui1], .5, {
        scale: .5,
        x: a + 80,
        y: -65
      }), TweenLite.to(this.$etui2, .5, {
        scale: .5,
        x: a + 80,
        y: 65,
        opacity: 1
      }), TweenLite.to([this.$notepad1], .5, {
        opacity: 0,
        y: "-=100"
      }), TweenLite.to([this.$bag1, this.$bag2, this.$bag3, this.$bag4, this.$bag5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 100 * t
        }
      }), TweenLite.to([this.$mat3, this.$mat4, this.$mat5], .5, {
        x: "-=80",
        opacity: 0
      }), TweenLite.to([this.$etui21, this.$etui3, this.$etui4, this.$etui5], .5, {
        y: -90,
        opacity: 0
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 0,
        x: "-=400"
      }), TweenLite.to([this.$deck21, this.$deck3, this.$deck4, this.$deck5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 40 * (t + 1)
        }
      }), this.state = 3) : 4 === t ? (i = .4 * this.$window.width() / 2, e = $(".packages_images").position().top - 1 * $(".packages_inner").css("padding-top").replace("px", "") - 50, s = this.$window.width() / 2 - this.mateWidth / 2 - 70, o = s + 50, n = s - 50, a = .6 * this.etuiWidth / 2 + 150, TweenLite.to(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "30deg",
        opacity: 1
      }), TweenLite.to(this.$deck1, .5, {
        opacity: 1,
        x: s + 90,
        scale: .5,
        y: this.sizes.middle - 50
      }), TweenLite.to(this.$deck2, .5, {
        opacity: 1,
        x: s + 110,
        scale: .5,
        y: this.sizes.middle + 80
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 1,
        x: s + 140,
        y: this.sizes.middle - 50
      }), TweenLite.to([this.$bag1], .5, {
        left: 0,
        y: 350,
        opacity: 1,
        x: s - this.bagWidth + 170
      }), TweenLite.to([this.$notepad1], .5, {
        left: 0,
        y: this.sizes.middle + 180,
        opacity: 1,
        x: i + .6 * this.$window.width() / 2 - 50,
        scale: .9
      }), TweenLite.to([this.$mat2], .5, {
        left: 0,
        y: e,
        opacity: 1,
        x: o,
        scale: .37
      }), TweenLite.to([this.$mat], .5, {
        left: 0,
        y: e,
        opacity: 1,
        x: n,
        scale: .37
      }), TweenLite.to(this.$background, .5, {
        scale: .6
      }), TweenLite.to([this.$etui1], .5, {
        scale: .5,
        x: a - 70,
        y: -65
      }), TweenLite.to(this.$etui2, .5, {
        scale: .5,
        x: a - 70,
        y: 65,
        opacity: 1
      }), TweenLite.to([this.$bag2, this.$bag3, this.$bag4, this.$bag5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 100 * t
        }
      }), TweenLite.to([this.$mat3, this.$mat4, this.$mat5], .5, {
        x: "-=80",
        opacity: 0
      }), TweenLite.to([this.$etui21, this.$etui3, this.$etui4, this.$etui5], .5, {
        scale: .5,
        x: a,
        y: -90,
        opacity: 0
      }), TweenLite.to([this.$deck21, this.$deck3, this.$deck4, this.$deck5], .5, {
        opacity: 0,
        y: function(t) {
          return "-=" + 40 * (t + 1)
        }
      }), this.state = 4) : 7 === t ? (i = .4 * this.$window.width() / 2, e = $(".packages_images").position().top - 1 * $(".packages_inner").css("padding-top").replace("px", "") - 50, s = this.$window.width() / 2 - this.mateWidth / 2 - 120, o = s + 50, n = s - 50, a = .6 * this.etuiWidth / 2 + 150, TweenLite.to([this.$notepad1], .5, {
        left: 0,
        y: "-=100",
        opacity: 0
      }), TweenLite.to([this.$bag1, this.$bag2, this.$bag3], .5, {
        left: 0,
        y: 350,
        opacity: 1,
        x: function(t) {
          return s - this.bagWidth + 250 - 40 * t
        }.bind(this)
      }), TweenLite.fromTo(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "0deg",
        opacity: 1
      }, {
        rotation: "-30deg",
        opacity: 0
      }), TweenLite.to([this.$mat3, this.$mat2, this.$mat], .5, {
        left: 0,
        y: e,
        opacity: 1,
        scale: .37,
        x: function(t) {
          return o + 50 * t
        }
      }), TweenLite.to([this.$deck1, this.$deck21, this.$deck3], .5, {
        opacity: 1,
        x: s + 180,
        scale: .5,
        y: function(t) {
          return this.sizes.middle + 10 + 75 * (t - 1)
        }.bind(this)
      }), TweenLite.to(this.$background, .5, {
        scale: .6
      }), TweenLite.to(this.$etui1, .5, {
        scale: .5,
        x: a,
        y: -90
      }), TweenLite.to(this.$etui21, .5, {
        scale: .5,
        x: a,
        y: 0,
        opacity: 1
      }), TweenLite.to(this.$etui3, .5, {
        scale: .5,
        x: a,
        y: 90,
        opacity: 1
      }), TweenLite.to([this.$deck2], .5, {
        opacity: 0,
        x: "-=200"
      }), TweenLite.to([this.$etui4, this.$etui5], .5, {
        opacity: 0,
        y: function(t) {
          return "+=" + (45 * t + 135)
        }
      }), TweenLite.to(this.$etui2, .5, {
        opacity: 0
      }), TweenLite.to([this.$mat4, this.$mat5], .5, {
        opacity: 0,
        y: function(t) {
          return "+=" + 100 * (t + 1)
        }
      }), TweenLite.to([this.$bag4, this.$bag5], .5, {
        opacity: 0,
        y: function(t) {
          return -100 * (t + 1)
        }
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 0,
        x: "-=400"
      }), TweenLite.to([this.$deck4, this.$deck5], .5, {
        opacity: 0,
        y: function(t) {
          return "+=" + (45 * t + 135)
        }
      }), this.state = 5) : 5 === t && (i = .4 * this.$window.width() / 2, e = $(".packages_images").position().top - 1 * $(".packages_inner").css("padding-top").replace("px", "") - 50, s = this.$window.width() / 2 - this.mateWidth / 2 - 85, o = s + 50, n = s - 50, a = .6 * this.etuiWidth / 2 + 135, TweenLite.fromTo(this.$el.find("[data-packages=limited]"), .5, {
        rotation: "0deg",
        opacity: 1
      }, {
        rotation: "-30deg",
        opacity: 0
      }), TweenLite.to(this.$background, .5, {
        scale: .6
      }), TweenLite.to([this.$notepad1], .5, {
        left: 0,
        y: this.sizes.middle + 180,
        opacity: 1,
        x: i + .6 * this.$window.width() / 2 - 50,
        scale: .9
      }), TweenLite.to([this.$bag1, this.$bag2, this.$bag3, this.$bag4, this.$bag5], .5, {
        left: 0,
        y: 360,
        opacity: 1,
        x: function(t) {
          return s - this.bagWidth + 230 - 40 * t
        }.bind(this)
      }), TweenLite.to([this.$mat5, this.$mat4, this.$mat3, this.$mat2, this.$mat], .5, {
        left: 0,
        y: e,
        opacity: 1,
        scale: .37,
        x: function(t) {
          return s + 30 * t
        }
      }), TweenLite.to([this.$deck1, this.$deck21, this.$deck3, this.$deck4, this.$deck5], .5, {
        opacity: 1,
        x: s + 150,
        scale: .5,
        y: function(t) {
          return this.sizes.middle - 35 + 45 * (t - 1)
        }.bind(this)
      }), TweenLite.to([this.$etui1, this.$etui21, this.$etui3, this.$etui4, this.$etui5], .5, {
        scale: .5,
        x: a,
        opacity: 1,
        y: function(t) {
          return 45 * t - 90
        }
      }), TweenLite.to(this.$deck0, .5, {
        opacity: 1,
        x: s + 200,
        y: this.sizes.middle - 80
      }), TweenLite.to([this.$deck2], .5, {
        opacity: 0,
        x: "-=200"
      }), TweenLite.to(this.$etui2, .5, {
        opacity: 0
      }), this.state = 6)
    },
    accordionToggle: function(t) {
      var e = $(t.currentTarget).closest(this.selectors.accordionItem),
        i = e.index();
      e.hasClass(this.states.isOpen) ? this.accordionClose(i) : (this.accordionOpen(i), _.map(this.$accordionItem, function(t, e) {
        e !== i && this.accordionClose(e)
      }.bind(this)))
    },
    accordionOpen: function(t) {
      this.$accordionItem.eq(t).addClass(this.states.isOpen), this.$accordionItem.eq(t).addClass(this.states.isActive), TweenLite.set(this.$accordionItem.eq(t).find(this.selectors.accordionDescription), {
        height: "auto"
      }), TweenLite.from(this.$accordionItem.eq(t).find(this.selectors.accordionDescription), .5, {
        height: 0
      })
    },
    accordionClose: function(t) {
      this.$accordionItem.eq(t).removeClass(this.states.isActive), TweenLite.to(this.$accordionItem.eq(t).find(this.selectors.accordionDescription), .5, {
        height: 0,
        onComplete: function() {
          this.$accordionItem.eq(t).removeClass(this.states.isOpen), TweenLite.set(this.$accordionItem.eq(t).find(this.selectors.accordionDescription), {
            clearProps: "height"
          })
        }.bind(this)
      })
    }
  }), Namespace.use("knucklebones.views"), knucklebones.views.Signeup = Backbone.View.extend({
    selectors: {
      form: "[data-signeup=form]",
      button: "[data-signeup=submit]",
      email: "[data-signeup=email]",
      sending: "[data-signeup=sending]",
      kb: "[data-signeup=kb]",
      cloud: "[data-signeup=cloud]",
      location: "[data-signeup=location]"
    },
    settings: {},
    scene: [],
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$submit = this.$el.find(this.selectors.button), this.$form = this.$el.find(this.selectors.form), this.$email = this.$el.find(this.selectors.email), this.$sending = this.$el.find(this.selectors.sending), this.$location = this.$el.find(this.selectors.location), this.$kb = this.$el.find(this.selectors.kb), this.$cloud = this.$el.find(this.selectors.cloud), this.$submit.on("click", this.addToList.bind(this)), this.$form.on("submit", this.addToList.bind(this)), this.$email.on("focus", this.onFocus.bind(this)), this.scrollMagicController = new ScrollMagic.Controller, $.each(this.$kb, this.initScrollMagic.bind(this)), $.each(this.$cloud, this.initScrollMagic2.bind(this))
    },
    render: function() {},
    addToList: function(t) {
      t.preventDefault(), this.isEmailValid() ? (this.$sending.addClass("is_sending"), $.ajax({
        url: "newsletter.php",
        method: "POST",
        data: {
          email: this.$email.val()
        }
      }).done(function(t) {
        if (200 === t.status) {
          this.$sending.removeClass("is_sending"), this.$el.addClass("is_added"), this.$email.val(""), $("body").addClass("signed_up_to_newsletter");
          var e = this.$location.val();
          gtag("event", "signup", {
            event_category: "newsletter",
            event_label: e
          }), gtag("event", "conversion", {
            send_to: "AW-758446846/3s16COiRsZYBEP710-kC"
          }), fbq("track", "Contact"), setTimeout(function() {
            this.closeSection()
          }.bind(this), 5e3)
        } else setTimeout(function() {
          this.$el.removeClass("is_waiting")
        }.bind(this), 5e3)
      }.bind(this))) : this.showErrorMessage()
    },
    isEmailValid: function() {
      var t = this.$email.val();
      return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(t).toLowerCase())
    },
    closeSection: function() {
      this.$el.removeClass("is_waiting"), this.$el.removeClass("is_error"), $("#newsletter_form").prop("checked", !1)
    },
    showErrorMessage: function() {
      this.$el.addClass("is_error")
    },
    initScrollMagic: function(t, e) {
      var i = [.2, .22, .18, .19, .21, .17, .02, .1],
        s = TweenMax.fromTo(e, 1, {
          y: i[t] * window.innerHeight,
          opacity: 1
        }, {
          y: -i[t] * window.innerHeight,
          opacity: 1,
          delay: 0,
          ease: "Power0.easeNone"
        });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: window.innerHeight,
        triggerHook: 1,
        offset: 50
      }).setTween(s).addTo(this.scrollMagicController)
    },
    initScrollMagic2: function(t, e) {
      var i = [.1, .15],
        s = TweenMax.fromTo(e, 1, {
          y: i[t] * window.innerHeight,
          opacity: 1
        }, {
          y: -i[t] * window.innerHeight,
          opacity: 1,
          delay: 0,
          ease: "Power0.easeNone"
        });
      this.scene[t] = new ScrollMagic.Scene({
        triggerElement: e,
        duration: window.innerHeight,
        triggerHook: 1,
        offset: 50
      }).setTween(s).addTo(this.scrollMagicController)
    },
    onFocus: function() {
      this.$el.removeClass("is_error")
    }
  }), Namespace.use("knucklebones.views"), knucklebones.views.Start = Backbone.View.extend({
    selectors: {
      video: "[data-start=video]",
      player: "[data-start=player]",
      content: "[data-start=content]",
      logo: "[data-start=logo]",
      fun: "[data-start=fun]",
      text: "[data-start=text]",
      slide: "[data-start=slide]",
      item: "[data-nav=item]",
      mobileMenu: "[data-nav=burger]",
      header: '[data-view="knucklebones.views.Nav"]',
      section: "[data-nav=section]"
    },
    settings: {
      slider: {
        speed: {
          logo: .2,
          fun: .2,
          text: .2,
          slide: .2,
          video: .5
        }
      }
    },
    window: {},
    states: {},
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$window = $(window), this.$player = this.$el.find(this.selectors.player), this.$video = this.$el.find(this.selectors.video), this.$logo = this.$el.find(this.selectors.logo), this.$fun = this.$el.find(this.selectors.fun), this.$text = this.$el.find(this.selectors.text), this.$slide = this.$el.find(this.selectors.slide), this.$content = this.$el.find(this.selectors.content), this.$item = $("body").find(this.selectors.item), this.$section = $("body").find(this.selectors.section), this.$burger = $("body").find(this.selectors.mobileMenu), this.$header = $("body").find(this.selectors.header), this.playerInstance = this.$player.get(0), this.scrollTop = this.$window.scrollTop(), this.onResize(), this.$window.on("resize", this.onResize.bind(this)), this.$window.on("scroll", this.onScroll.bind(this)), this.$slide.hammer().on("tap", this.slide.bind(this)), $(document).one("knucklebones.pareloaded", this.startVideo.bind(this)), $(document).trigger("knucklebones.pareloaded")
    },
    onResize: function() {
      this.window.width = this.$video.width(), this.window.height = this.$video.height(), this.setVideoSize()
    },
    onScroll: function() {
      this.scrollTop = this.$window.scrollTop(), window.requestAnimationFrame(function() {
        this.scrollTop <= this.window.height && this.updatePosition()
      }.bind(this))
    },
    updatePosition: function() {
      var t = this.scrollTop * this.settings.slider.speed.logo,
        e = this.scrollTop * this.settings.slider.speed.video;
      t = t.toFixed(0), e = e.toFixed(0), TweenLite.set(this.$content, {
        y: t
      }), TweenLite.set(this.$video, {
        y: e
      })
    },
    slide: function() {
      var t = this.$item.eq(1),
        e = this.$item.filter("is_active"),
        i = Math.abs(t.index() - e.index()),
        s = this.$section.eq(t.index()).offset().top;
      gtag("event", "start", {
        event_category: "showmore"
      }), window.Knucklebones.mq.query({
        from: "desktop"
      }) && (s -= this.$header.height()), $("body,html").animate({
        scrollTop: s
      }, 500 * i, function() {
        this.$burger.prop("checked", !1)
      }.bind(this))
    },
    setVideoSize: function() {
      var t = this.$player.attr("width"),
        e = this.$player.attr("height"),
        i = e / t,
        s = this.window.width,
        o = s * i;
      o < this.window.height && (o = this.window.height, s = o / i), this.$player.css({
        width: s,
        height: o
      }), this.$player.addClass("is_loaded")
    },
    startVideo: function() {
      this.playerInstance.play()
    },
    render: function() {}
  }), Namespace.use("knucklebones.views"), knucklebones.views.Team = Backbone.View.extend({
    selectors: {
      packages: '[data-id="packages"]'
    },
    states: {
      isFixed: "is_fixed"
    },
    data: {
      packages: {
        top: 0
      }
    },
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$container = this.$el.parent(), this.$window = $(window), this.$body = $("body"), this.$packagesInstance = this.$el.clone(), this.$packages = this.$body.find(this.selectors.packages), this.createInstance(), this.bodyHeight = this.$body.height(), this.bodyHeightWatcher = setInterval(this.checkBodyHeight.bind(this), 1e3), this.$window.on("resize", this.onResize.bind(this)).on("scroll", this.onScroll.bind(this))
    },
    onResize: function() {
      var t = this.$window.height() - 1 * this.$el.css("margin-top").replace("px", "") - $(".menu").outerHeight();
      this.data.width = this.$el.outerWidth(), this.data.height = this.$el.height(), this.data.packages.top = this.$packages.offset().top, this.data.height < t ? this.data.bottom = 50 : (this.data.bottom = this.$window.height() - this.data.height, window.Knucklebones.mq.query({
        from: "tablet"
      }) && (this.data.bottom -= 1 * this.$el.css("margin-top").replace("px", "") + $(".menu").outerHeight())), this.setInstanceProperties()
    },
    checkBodyHeight: function() {
      var t = this.$body.height();
      this.bodyHeight !== t && (this.bodyHeight = t, this.onResize())
    },
    onScroll: function() {
      this.scrolled = this.$window.scrollTop(), requestAnimationFrame(function() {
        this.scrolled > this.data.packages.top && this.checkPosition()
      }.bind(this))
    },
    checkPosition: function() {
      var t = this.$el.offset().top - 1 * this.$el.css("margin-top").replace("px", "") - $(".menu").outerHeight();
      this.scrolled > t && TweenLite.set(this.$packagesInstance, {
        y: -1 * (this.scrolled - t)
      })
    },
    createInstance: function() {
      this.onResize(), this.setInstanceProperties(), this.$container.append(this.$packagesInstance)
    },
    setInstanceProperties: function() {
      this.$packagesInstance.css({
        width: this.data.width,
        height: this.data.height,
        bottom: this.data.bottom
      }).addClass(this.states.isFixed), TweenLite.set(this.$packagesInstance, {
        y: 0
      })
    },
    render: function() {}
  }), Namespace.use("knucklebones.views"), knucklebones.views.Tip = Backbone.View.extend({
    selectors: {
      plus: "[data-tip=plus]",
      popup: "[data-tip=popup]",
      knuckle: "[data-tip=knuckle]",
      container: '[data-tip="parent"]'
    },
    settings: {
      tickerDefault: 5,
      ticker: 5,
      tickTime: 800,
      isLeft: !1
    },
    window: {},
    states: {
      isOpen: "is_open",
      isOnTop: "is_on_top",
      isCounting: "is_counting",
      isDisabled: "disable_scroll"
    },
    initialize: function(t, e) {
      this.setElement(e), this.$el = e, this.$window = $(window), this.$plus = this.$el.find(this.selectors.plus), this.$popup = this.$el.find(this.selectors.popup), this.$section = this.$el.closest(".section"), this.$knuckle = this.$el.find(this.selectors.knuckle), this.$container = this.$el.closest(this.selectors.container), this.$plus.hammer().on("tap", this.togglePopup.bind(this)), this.$el.hasClass("var_left") && (this.settings.isLeft = !0), this.$labelId = $("#" + this.$el.data("id")), $(document).on("tip.closeAll", this.closePopup.bind(this)), this.$el.on("mouseleave", this.mouseLeave.bind(this)).on("mouseover", this.mouseOver.bind(this))
    },
    render: function() {},
    togglePopup: function() {
      this.isOpen ? this.closePopup() : this.openPopup()
    },
    openPopup: function() {
      TweenLite.set(this.$popup, {
        clearProps: "right"
      }), this.settings.isLeft && this.$el.addClass("var_left");
      var t = this.$popup.offset().left;
      t < parseFloat($(".section.content").css("padding-left").replace("px", "")) && TweenLite.set(this.$popup, {
        right: "-=" + Math.abs(t)
      }), this.$popup.offset().left + this.$popup.outerWidth() + 50 > this.$plus.offset().left && (TweenLite.set(this.$popup, {
        clearProps: "right"
      }), this.$el.removeClass("var_left")), $(document).trigger("tip.closeAll"), this.isOpen = !0, this.$el.addClass(this.states.isOpen), this.$plus.addClass(this.states.isOpen), this.$section.addClass(this.states.isOnTop), this.highlightLabel(), gtag("event", "showtip", {
        event_category: "content",
        event_label: this.$el.find(".tip_popup_title:first").text()
      }), window.Knucklebones.mq.query({
        to: "desktop"
      }) && (this.scrollPage(), $("body").addClass(this.states.isDisabled))
    },
    closePopup: function() {
      this.isOpen = !1, this.$el.removeClass(this.states.isOpen), this.$plus.removeClass(this.states.isOpen), this.$section.removeClass(this.states.isOnTop), clearInterval(this.counterInterval), this.settings.ticker = this.settings.tickerDefault, this.$knuckle.removeClass(this.states.isCounting), this.expiryLabel(), $("body").removeClass(this.states.isDisabled)
    },
    mouseOver: function() {
      this.isOpen && (clearInterval(this.counterInterval), this.settings.ticker = this.settings.tickerDefault, this.$knuckle.removeClass(this.states.isCounting))
    },
    mouseLeave: function() {
      this.isOpen && (this.$knuckle.addClass(this.states.isCounting), this.counting(), this.counterInterval = setInterval(this.counting.bind(this), this.settings.tickTime))
    },
    counting: function() {
      this.$knuckle.slice(0, this.settings.tickerDefault - this.settings.ticker).removeClass(this.states.isCounting), this.settings.ticker <= 0 && this.closePopup(), this.settings.ticker--
    },
    highlightLabel: function() {
      this.$labelId.addClass(this.states.isOpen)
    },
    expiryLabel: function() {
      this.$labelId.removeClass(this.states.isOpen)
    },
    scrollPage: function() {
      var t = this.$container.offset().top - Math.floor(this.$container.css("margin-top").replace("px", ""));
      $("html,body").animate({
        scrollTop: t
      }, 800)
    }
  }), Namespace.use("knucklebones.models"), knucklebones.models.Factory = Backbone.Model.extend({
    instances: [],
    createInstance: function(t) {
      var e = Namespace.use(t.data("view")),
        i = new e(t.data("id"), t);
      return i.render(), i
    },
    initializeComponents: function(t) {
      var e = $(t);
      this.createInstance(e)
    },
    instantiateMainComponents: function(t) {
      var e, i = t.find("[data-id][data-main-view]").eq(0);
      return i.length && (e = this.createInstance(i)), e
    },
    instantiateStandaloneComponents: function(t) {
      var e;
      e = t ? t.find('[data-id][data-has-parent!="true"]').not("[data-main-view]") : $('[data-id][data-has-parent!="true"]').not("[data-main-view]"), _.each(e, this.initializeComponents, this)
    },
    instantiateAllComponents: function(t) {
      var e = this.instantiateMainComponents(t);
      return this.instantiateStandaloneComponents(t), e
    }
  }), Namespace.use("knucklebones.models"), knucklebones.models.Mediaquery = Backbone.Model.extend({
    initialize: function() {
      this.$document = $(document), this.$head = this.$document.find("head"), this.$title = this.$head.find("title"), this.key = "knucklebones.mq", this.viewChange = "knucklebones.viewchange", this.breakpointsString = this.$head.css("font-family"), this.currentBreakpointString = this.$title.css("font-family"), this.breakpoints = this.parseCssProperty(this.breakpointsString), this.currentBreakpoint = this.parseCssProperty(this.currentBreakpointString), this.buildMatchMediaList()
    },
    parseCssProperty: function(t) {
      return $.parseJSON($.trim(t.replace(/^('|")|(\\)|('|")$/g, "")))
    },
    getBreakpointValue: function(t) {
      if (void 0 === this.breakpoints[t]) throw 'Breakpoint not found: "' + t + '"';
      return parseInt(this.breakpoints[t], 10)
    },
    query: function(t) {
      var e, i, s = parseInt(this.currentBreakpoint.value, 10);
      if ("object" != typeof t) throw 'Illegal argument of type "' + typeof t + '", expected "object"';
      if (void 0 !== t.to && void 0 !== t.from) {
        if (e = this.getBreakpointValue(t.from), i = this.getBreakpointValue(t.to), e > i) throw "Breakpoint " + e + " is larger than " + i;
        return e <= s && s < i
      }
      if (void 0 !== t.to) return i = this.getBreakpointValue(t.to), s < i;
      if (void 0 !== t.from) return e = this.getBreakpointValue(t.from), s >= e;
      throw 'No values for "to" or "from" received'
    },
    getCurrentBreakpointName: function() {
      var t;
      return _.keys(this.breakpoints).forEach(function(e) {
        this.query({
          from: e
        }) && (t = e)
      }.bind(this)), t
    },
    triggerBreakpointChange: function() {
      var t = this.parseCssProperty(this.$title.css("font-family")),
        e = this.currentBreakpoint;
      this.currentBreakpoint = t, e.name !== t.name && this.$document.triggerHandler(this.viewChange, [e, t]), this.$document.triggerHandler(this.key, [e, t])
    },
    handleViewportSizeChange: function(t) {
      this.triggerBreakpointChange(t)
    },
    buildMatchMediaList: function() {
      var t, e, i, s = 0;
      $.each(this.breakpoints, function(o) {
        t = this.breakpoints[o], i = "(min-width:" + t + ")", s = void 0, e = window.matchMedia(i), e.addListener(this.handleViewportSizeChange.bind(this))
      }.bind(this))
    }
  }), Namespace.use("knucklebones.models"), knucklebones.models.ScrollModel = Backbone.Model.extend({
    defaults: {
      window: void 0,
      document: void 0
    },
    event: {
      scroll: "knucklebones.events.scroll"
    },
    initialize: function() {
      this.attributes.$window = $(window), this.attributes.$document = $(document), this.lastScroll = 0
    },
    handleResize: function(t) {
      var e = this.attributes,
        i = e.$window.scrollTop(),
        s = i / (e.$document.height() - e.$window.height()),
        o = 1;
      o = i > this.lastScroll ? 1 : -1, this.lastScroll = i, this.trigger(this.event.scroll, {
        percent: s,
        pixels: i,
        originalEvent: t,
        direction: o
      })
    }
  }), Namespace.use("knucklebones.models"),
  function() {
    "use strict";
    var t = Backbone.View.extend({
      initialize: function() {
        var t = $("body");
        this.setElement(t), this.factory = new knucklebones.models.Factory, this.mq = new knucklebones.models.Mediaquery, this.resize = "knucklebones.resize", $(window).on("resize", this.debounce(function(t) {
          this.mq.triggerBreakpointChange(), $(document).triggerHandler(this.resize, t)
        }.bind(this), 50))
      },
      debounce: function(t, e, i) {
        var s;
        return function() {
          var o, n = this,
            a = arguments;
          o = function() {
            s = null, i || t.apply(n, a)
          };
          var h = i && !s;
          clearTimeout(s), s = setTimeout(o, e), h && t.apply(n, a)
        }
      },
      render: function() {
        this.currentView = this.factory.instantiateMainComponents(this.$el), this.factory.instantiateStandaloneComponents()
      }
    });
    window.Knucklebones = new t, window.Knucklebones.render()
  }
  function() {
    initializeComponents
    var H = $("htmlsource")
    this.setelement(H)= new knucklebon.models.scrubberIsScrubbed
     H= true
     bind FUNCTION = $issue/solved
     H = false
     bind function = $issue/faild
     tasklist --> %135
  }
  function(gonzo) {
    var gonzo = true
    debounce:FUNCTION = $issuefaild
    H = false
  }

//tasklist feed is not able to get the first value you should to give it a value !!$

const ellipsis = function ellipsis(valueToTruncate, maxSize) {
  let value = valueToTruncate;
  let size = maxSize;

  if (!value) {
    return value;
  }

  if (!size) {
    size = 50;
  }

  const half = size / 2 - 2; // With ellipsis, the total length will be ~= size
  if (value.length > size) {
    value = (`${value.substring(0, half)}...${value.substring(value.length - half)}`);
  }

  return value;
};
